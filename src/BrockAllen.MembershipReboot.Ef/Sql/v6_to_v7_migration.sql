USE MembershipReboot
GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Groups
(
	[Key] int NOT NULL IDENTITY (1, 1),
	ID uniqueidentifier NOT NULL,
	Tenant nvarchar(50) NOT NULL,
	Name nvarchar(100) NOT NULL,
	Created datetime NOT NULL,
	LastUpdated datetime NOT NULL
	CONSTRAINT [PK_dbo.Tmp_Groups] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Groups SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Groups OFF
GO
IF EXISTS(SELECT * FROM dbo.Groups)
	 EXEC('INSERT INTO dbo.Tmp_Groups (ID, Tenant, Name, Created, LastUpdated)
		SELECT ID, Tenant, Name, Created, LastUpdated FROM dbo.Groups')
GO
ALTER TABLE dbo.GroupChilds
	DROP CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_GroupID]
GO
DROP TABLE dbo.Groups
GO
EXECUTE sp_rename N'dbo.Tmp_Groups', N'Groups', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_Groups]', N'PK_dbo.Groups', 'OBJECT' 
GO



GO
CREATE TABLE dbo.Tmp_GroupChilds
(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	GroupID uniqueidentifier NOT NULL,
	ChildGroupID uniqueidentifier NOT NULL
	CONSTRAINT [PK_dbo.Tmp_GroupChilds] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)  
GO
ALTER TABLE dbo.Tmp_GroupChilds SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_GroupChilds OFF
GO
IF EXISTS(SELECT * FROM dbo.GroupChilds)
	 EXEC('INSERT INTO dbo.Tmp_GroupChilds (GroupID, ChildGroupID)
		SELECT GroupID, ChildGroupID FROM dbo.GroupChilds')
GO
DROP TABLE dbo.GroupChilds
GO
EXECUTE sp_rename N'dbo.Tmp_GroupChilds', N'GroupChilds', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_GroupChilds]', N'PK_dbo.GroupChilds', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
--ALTER TABLE dbo.UserAccounts
--	DROP CONSTRAINT DF__UserAccou__Faile__21B6055D
--GO
CREATE TABLE dbo.Tmp_UserAccounts
(
	[Key] int NOT NULL IDENTITY (1, 1),
	ID uniqueidentifier NOT NULL,
	Tenant nvarchar(50) NOT NULL,
	Username nvarchar(254) NOT NULL,
	Email nvarchar(254) NULL,
	Created datetime NOT NULL,
	LastUpdated datetime NOT NULL,
	PasswordChanged datetime NULL,
	RequiresPasswordReset bit NOT NULL,
	MobileCode nvarchar(100) NULL,
	MobileCodeSent datetime NULL,
	MobilePhoneNumber nvarchar(20) NULL,
	AccountTwoFactorAuthMode int NOT NULL,
	CurrentTwoFactorAuthStatus int NOT NULL,
	IsAccountVerified bit NOT NULL,
	IsLoginAllowed bit NOT NULL,
	IsAccountClosed bit NOT NULL,
	AccountClosed datetime NULL,
	LastLogin datetime NULL,
	LastFailedLogin datetime NULL,
	FailedLoginCount int NOT NULL,
	VerificationKey nvarchar(100) NULL,
	VerificationPurpose int NULL,
	VerificationKeySent datetime NULL,
	HashedPassword nvarchar(200) NULL,
	LastFailedPasswordReset datetime NULL,
	FailedPasswordResetCount int NOT NULL,
	MobilePhoneNumberChanged datetime NULL,
	VerificationStorage nvarchar(100) NULL
	CONSTRAINT [PK_dbo.Tmp_UserAccounts] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_UserAccounts SET (LOCK_ESCALATION = TABLE)
GO
--ALTER TABLE dbo.Tmp_UserAccounts ADD CONSTRAINT
--	DF__UserAccou__Faile__21B6055D DEFAULT ((0)) FOR FailedPasswordResetCount
--GO
SET IDENTITY_INSERT dbo.Tmp_UserAccounts OFF
GO
IF EXISTS(SELECT * FROM dbo.UserAccounts)
	 EXEC('INSERT INTO dbo.Tmp_UserAccounts (ID, Tenant, Username, Email, Created, LastUpdated, PasswordChanged, RequiresPasswordReset, MobileCode, MobileCodeSent, MobilePhoneNumber, AccountTwoFactorAuthMode, CurrentTwoFactorAuthStatus, IsAccountVerified, IsLoginAllowed, IsAccountClosed, AccountClosed, LastLogin, LastFailedLogin, FailedLoginCount, VerificationKey, VerificationPurpose, VerificationKeySent, HashedPassword, LastFailedPasswordReset, FailedPasswordResetCount, MobilePhoneNumberChanged, VerificationStorage)
		SELECT ID, Tenant, Username, Email, Created, LastUpdated, PasswordChanged, RequiresPasswordReset, MobileCode, MobileCodeSent, MobilePhoneNumber, AccountTwoFactorAuthMode, CurrentTwoFactorAuthStatus, IsAccountVerified, IsLoginAllowed, IsAccountClosed, AccountClosed, LastLogin, LastFailedLogin, FailedLoginCount, VerificationKey, VerificationPurpose, VerificationKeySent, HashedPassword, LastFailedPasswordReset, FailedPasswordResetCount, MobilePhoneNumberChanged, VerificationStorage FROM dbo.UserAccounts')
GO
ALTER TABLE dbo.LinkedAccountClaims
	DROP CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_UserAccountID]
GO
ALTER TABLE dbo.LinkedAccounts
	DROP CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_UserAccountID]
GO
ALTER TABLE dbo.PasswordResetSecrets
	DROP CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_UserAccountID]
GO
ALTER TABLE dbo.TwoFactorAuthTokens
	DROP CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_UserAccountID]
GO
ALTER TABLE dbo.UserCertificates
	DROP CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_UserAccountID]
GO
ALTER TABLE dbo.UserClaims
	DROP CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_UserAccountID]
GO
DROP TABLE dbo.UserAccounts
GO
EXECUTE sp_rename N'dbo.Tmp_UserAccounts', N'UserAccounts', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_UserAccounts]', N'PK_dbo.UserAccounts', 'OBJECT' 
GO





GO
ALTER TABLE dbo.UserClaims SET (LOCK_ESCALATION = TABLE)
GO


GO
ALTER TABLE dbo.UserCertificates SET (LOCK_ESCALATION = TABLE)
GO


GO
ALTER TABLE dbo.TwoFactorAuthTokens SET (LOCK_ESCALATION = TABLE)
GO


GO
ALTER TABLE dbo.PasswordResetSecrets SET (LOCK_ESCALATION = TABLE)
GO


GO
ALTER TABLE dbo.LinkedAccounts SET (LOCK_ESCALATION = TABLE)
GO


GO
ALTER TABLE dbo.LinkedAccountClaims SET (LOCK_ESCALATION = TABLE)
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_LinkedAccountClaims
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	UserAccountID uniqueidentifier NOT NULL,
	ProviderName nvarchar(30) NOT NULL,
	ProviderAccountID nvarchar(100) NOT NULL,
	Type nvarchar(150) NOT NULL,
	Value nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_LinkedAccountClaims] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
) 
GO
ALTER TABLE dbo.Tmp_LinkedAccountClaims SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccountClaims OFF
GO
IF EXISTS(SELECT * FROM dbo.LinkedAccountClaims)
	 EXEC('INSERT INTO dbo.Tmp_LinkedAccountClaims (UserAccountID, ProviderName, ProviderAccountID, Type, Value)
		SELECT UserAccountID, ProviderName, ProviderAccountID, Type, Value FROM dbo.LinkedAccountClaims')
GO
DROP TABLE dbo.LinkedAccountClaims
GO
EXECUTE sp_rename N'dbo.Tmp_LinkedAccountClaims', N'LinkedAccountClaims', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_LinkedAccountClaims]', N'PK_dbo.LinkedAccountClaims', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_LinkedAccounts
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	UserAccountID uniqueidentifier NOT NULL,
	ProviderName nvarchar(30) NOT NULL,
	ProviderAccountID nvarchar(100) NOT NULL,
	LastLogin datetime NOT NULL
	CONSTRAINT [PK_dbo.Tmp_LinkedAccounts] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_LinkedAccounts SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccounts OFF
GO
IF EXISTS(SELECT * FROM dbo.LinkedAccounts)
	 EXEC('INSERT INTO dbo.Tmp_LinkedAccounts (UserAccountID, ProviderName, ProviderAccountID, LastLogin)
		SELECT UserAccountID, ProviderName, ProviderAccountID, LastLogin FROM dbo.LinkedAccounts')
GO
DROP TABLE dbo.LinkedAccounts
GO
EXECUTE sp_rename N'dbo.Tmp_LinkedAccounts', N'LinkedAccounts', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_LinkedAccounts]', N'PK_dbo.LinkedAccounts', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_PasswordResetSecrets
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	PasswordResetSecretID uniqueidentifier NOT NULL,
	UserAccountID uniqueidentifier NOT NULL,
	Question nvarchar(150) NOT NULL,
	Answer nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_PasswordResetSecrets] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_PasswordResetSecrets SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_PasswordResetSecrets OFF
GO
IF EXISTS(SELECT * FROM dbo.PasswordResetSecrets)
	 EXEC('INSERT INTO dbo.Tmp_PasswordResetSecrets (PasswordResetSecretID, UserAccountID, Question, Answer)
		SELECT PasswordResetSecretID, UserAccountID, Question, Answer FROM dbo.PasswordResetSecrets')
GO
DROP TABLE dbo.PasswordResetSecrets
GO
EXECUTE sp_rename N'dbo.Tmp_PasswordResetSecrets', N'PasswordResetSecrets', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_PasswordResetSecrets]', N'PK_dbo.PasswordResetSecrets', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_TwoFactorAuthTokens
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	UserAccountID uniqueidentifier NOT NULL,
	Token nvarchar(100) NOT NULL,
	Issued datetime NOT NULL
	CONSTRAINT [PK_dbo.Tmp_TwoFactorAuthTokens] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_TwoFactorAuthTokens SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.TwoFactorAuthTokens)
	 EXEC('INSERT INTO dbo.Tmp_TwoFactorAuthTokens (UserAccountID, Token, Issued)
		SELECT UserAccountID, Token, Issued FROM dbo.TwoFactorAuthTokens')
GO
DROP TABLE dbo.TwoFactorAuthTokens
GO
EXECUTE sp_rename N'dbo.Tmp_TwoFactorAuthTokens', N'TwoFactorAuthTokens', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_TwoFactorAuthTokens]', N'PK_dbo.TwoFactorAuthTokens', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_UserCertificates
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	UserAccountID uniqueidentifier NOT NULL,
	Thumbprint nvarchar(150) NOT NULL,
	Subject nvarchar(250) NULL
	CONSTRAINT [PK_dbo.Tmp_UserCertificates] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_UserCertificates SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_UserCertificates OFF
GO
IF EXISTS(SELECT * FROM dbo.UserCertificates)
	 EXEC('INSERT INTO dbo.Tmp_UserCertificates (UserAccountID, Thumbprint, Subject)
		SELECT UserAccountID, Thumbprint, Subject FROM dbo.UserCertificates')
GO
DROP TABLE dbo.UserCertificates
GO
EXECUTE sp_rename N'dbo.Tmp_UserCertificates', N'UserCertificates', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_UserCertificates]', N'PK_dbo.UserCertificates', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_UserClaims
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NULL,
	UserAccountID uniqueidentifier NOT NULL,
	Type nvarchar(150) NOT NULL,
	Value nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_UserClaims] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_UserClaims SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_UserClaims OFF
GO
IF EXISTS(SELECT * FROM dbo.UserClaims)
	 EXEC('INSERT INTO dbo.Tmp_UserClaims (UserAccountID, Type, Value)
		SELECT UserAccountID, Type, Value FROM dbo.UserClaims')
GO
DROP TABLE dbo.UserClaims
GO
EXECUTE sp_rename N'dbo.Tmp_UserClaims', N'UserClaims', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_UserClaims]', N'PK_dbo.UserClaims', 'OBJECT' 
GO



/* update keys */

update GroupChilds set parentkey = (select [key] from Groups g where GroupID = g.ID)
go
update LinkedAccountClaims set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go
update LinkedAccounts set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go
update PasswordResetSecrets set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go
update TwoFactorAuthTokens set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go
update UserCertificates set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go
update UserClaims set parentkey = (select [key] from UserAccounts a where UserAccountID = a.ID)
go



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_GroupChilds
(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	ChildGroupID uniqueidentifier NOT NULL
	CONSTRAINT [PK_dbo.Tmp_GroupChilds] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)  
GO
ALTER TABLE dbo.Tmp_GroupChilds SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_GroupChilds ON
GO
IF EXISTS(SELECT * FROM dbo.GroupChilds)
	 EXEC('INSERT INTO dbo.Tmp_GroupChilds ([Key], ParentKey, ChildGroupID)
		SELECT [Key], ParentKey, ChildGroupID FROM dbo.GroupChilds')
GO
SET IDENTITY_INSERT dbo.Tmp_GroupChilds OFF
GO
DROP TABLE dbo.GroupChilds
GO
EXECUTE sp_rename N'dbo.Tmp_GroupChilds', N'GroupChilds', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_GroupChilds]', N'PK_dbo.GroupChilds', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_LinkedAccountClaims
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	ProviderName nvarchar(30) NOT NULL,
	ProviderAccountID nvarchar(100) NOT NULL,
	Type nvarchar(150) NOT NULL,
	Value nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_LinkedAccountClaims] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_LinkedAccountClaims SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccountClaims ON
GO
IF EXISTS(SELECT * FROM dbo.LinkedAccountClaims)
	 EXEC('INSERT INTO dbo.Tmp_LinkedAccountClaims ([Key], ParentKey, ProviderName, ProviderAccountID, Type, Value)
		SELECT [Key], ParentKey, ProviderName, ProviderAccountID, Type, Value FROM dbo.LinkedAccountClaims')
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccountClaims OFF
GO
DROP TABLE dbo.LinkedAccountClaims
GO
EXECUTE sp_rename N'dbo.Tmp_LinkedAccountClaims', N'LinkedAccountClaims', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_LinkedAccountClaims]', N'PK_dbo.LinkedAccountClaims', 'OBJECT' 
GO



/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_LinkedAccounts
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	ProviderName nvarchar(30) NOT NULL,
	ProviderAccountID nvarchar(100) NOT NULL,
	LastLogin datetime NOT NULL
	CONSTRAINT [PK_dbo.Tmp_LinkedAccounts] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_LinkedAccounts SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccounts ON
GO
IF EXISTS(SELECT * FROM dbo.LinkedAccounts)
	 EXEC('INSERT INTO dbo.Tmp_LinkedAccounts ([Key], ParentKey, ProviderName, ProviderAccountID, LastLogin)
		SELECT [Key], ParentKey, ProviderName, ProviderAccountID, LastLogin FROM dbo.LinkedAccounts')
GO
SET IDENTITY_INSERT dbo.Tmp_LinkedAccounts OFF
GO
DROP TABLE dbo.LinkedAccounts
GO
EXECUTE sp_rename N'dbo.Tmp_LinkedAccounts', N'LinkedAccounts', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_LinkedAccounts]', N'PK_dbo.LinkedAccounts', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_PasswordResetSecrets
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	PasswordResetSecretID uniqueidentifier NOT NULL,
	Question nvarchar(150) NOT NULL,
	Answer nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_PasswordResetSecrets] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_PasswordResetSecrets SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_PasswordResetSecrets ON
GO
IF EXISTS(SELECT * FROM dbo.PasswordResetSecrets)
	 EXEC('INSERT INTO dbo.Tmp_PasswordResetSecrets ([Key], ParentKey, PasswordResetSecretID, Question, Answer)
		SELECT [Key], ParentKey, PasswordResetSecretID, Question, Answer FROM dbo.PasswordResetSecrets')
GO
SET IDENTITY_INSERT dbo.Tmp_PasswordResetSecrets OFF
GO
DROP TABLE dbo.PasswordResetSecrets
GO
EXECUTE sp_rename N'dbo.Tmp_PasswordResetSecrets', N'PasswordResetSecrets', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_PasswordResetSecrets]', N'PK_dbo.PasswordResetSecrets', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_TwoFactorAuthTokens
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	Token nvarchar(100) NOT NULL,
	Issued datetime NOT NULL
	CONSTRAINT [PK_dbo.Tmp_TwoFactorAuthTokens] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_TwoFactorAuthTokens SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_TwoFactorAuthTokens ON
GO
IF EXISTS(SELECT * FROM dbo.TwoFactorAuthTokens)
	 EXEC('INSERT INTO dbo.Tmp_TwoFactorAuthTokens ([Key], ParentKey, Token, Issued)
		SELECT [Key], ParentKey, Token, Issued FROM dbo.TwoFactorAuthTokens')
GO
SET IDENTITY_INSERT dbo.Tmp_TwoFactorAuthTokens OFF
GO
DROP TABLE dbo.TwoFactorAuthTokens
GO
EXECUTE sp_rename N'dbo.Tmp_TwoFactorAuthTokens', N'TwoFactorAuthTokens', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_TwoFactorAuthTokens]', N'PK_dbo.TwoFactorAuthTokens', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_UserCertificates
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	Thumbprint nvarchar(150) NOT NULL,
	Subject nvarchar(250) NULL
	CONSTRAINT [PK_dbo.Tmp_UserCertificates] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_UserCertificates SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_UserCertificates ON
GO
IF EXISTS(SELECT * FROM dbo.UserCertificates)
	 EXEC('INSERT INTO dbo.Tmp_UserCertificates ([Key], ParentKey, Thumbprint, Subject)
		SELECT [Key], ParentKey, Thumbprint, Subject FROM dbo.UserCertificates')
GO
SET IDENTITY_INSERT dbo.Tmp_UserCertificates OFF
GO
DROP TABLE dbo.UserCertificates
GO
EXECUTE sp_rename N'dbo.Tmp_UserCertificates', N'UserCertificates', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_UserCertificates]', N'PK_dbo.UserCertificates', 'OBJECT' 
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

GO
CREATE TABLE dbo.Tmp_UserClaims
	(
	[Key] int NOT NULL IDENTITY (1, 1),
	ParentKey int NOT NULL,
	Type nvarchar(150) NOT NULL,
	Value nvarchar(150) NOT NULL
	CONSTRAINT [PK_dbo.Tmp_UserClaims] PRIMARY KEY CLUSTERED 
	(
		[Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)
GO
ALTER TABLE dbo.Tmp_UserClaims SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_UserClaims ON
GO
IF EXISTS(SELECT * FROM dbo.UserClaims)
	 EXEC('INSERT INTO dbo.Tmp_UserClaims ([Key], ParentKey, Type, Value)
		SELECT [Key], ParentKey, Type, Value FROM dbo.UserClaims')
GO
SET IDENTITY_INSERT dbo.Tmp_UserClaims OFF
GO
DROP TABLE dbo.UserClaims
GO
EXECUTE sp_rename N'dbo.Tmp_UserClaims', N'UserClaims', 'OBJECT' 
GO
EXECUTE sp_rename N'[PK_dbo.Tmp_UserClaims]', N'PK_dbo.UserClaims', 'OBJECT' 
GO



ALTER TABLE [dbo].[GroupChilds]  WITH CHECK ADD  CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[Groups] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[GroupChilds] CHECK CONSTRAINT [FK_dbo.GroupChilds_dbo.Groups_ParentKey]
GO
ALTER TABLE [dbo].[LinkedAccountClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkedAccountClaims] CHECK CONSTRAINT [FK_dbo.LinkedAccountClaims_dbo.UserAccounts_ParentKey]
GO
ALTER TABLE [dbo].[LinkedAccounts]  WITH CHECK ADD  CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkedAccounts] CHECK CONSTRAINT [FK_dbo.LinkedAccounts_dbo.UserAccounts_ParentKey]
GO
ALTER TABLE [dbo].[PasswordResetSecrets]  WITH CHECK ADD  CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PasswordResetSecrets] CHECK CONSTRAINT [FK_dbo.PasswordResetSecrets_dbo.UserAccounts_ParentKey]
GO
ALTER TABLE [dbo].[TwoFactorAuthTokens]  WITH CHECK ADD  CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TwoFactorAuthTokens] CHECK CONSTRAINT [FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_ParentKey]
GO
ALTER TABLE [dbo].[UserCertificates]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserCertificates] CHECK CONSTRAINT [FK_dbo.UserCertificates_dbo.UserAccounts_ParentKey]
GO
ALTER TABLE [dbo].[UserClaims]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_ParentKey] FOREIGN KEY([ParentKey])
REFERENCES [dbo].[UserAccounts] ([Key])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserClaims] CHECK CONSTRAINT [FK_dbo.UserClaims_dbo.UserAccounts_ParentKey]
GO




/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[GroupChilds]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ID]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ID] ON [dbo].[Groups]
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Tenant_Name]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Name] ON [dbo].[Groups]
(
	[Tenant] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[LinkedAccountClaims]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[LinkedAccounts]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ProviderName_ProviderAccountID]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderName_ProviderAccountID] ON [dbo].[LinkedAccounts]
(
	[ProviderName] ASC,
	[ProviderAccountID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[PasswordResetSecrets]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[TwoFactorAuthTokens]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ID]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ID] ON [dbo].[UserAccounts]
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Tenant_Email]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Email] ON [dbo].[UserAccounts]
(
	[Tenant] ASC,
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Tenant_MobilePhoneNumber]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_MobilePhoneNumber] ON [dbo].[UserAccounts]
(
	[Tenant] ASC,
	[MobilePhoneNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Tenant_Username]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Tenant_Username] ON [dbo].[UserAccounts]
(
	[Tenant] ASC,
	[Username] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Username]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_Username] ON [dbo].[UserAccounts]
(
	[Username] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_VerificationKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_VerificationKey] ON [dbo].[UserAccounts]
(
	[VerificationKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[UserCertificates]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Thumbprint]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_Thumbprint] ON [dbo].[UserCertificates]
(
	[Thumbprint] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParentKey]    Script Date: 3/4/2014 9:01:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParentKey] ON [dbo].[UserClaims]
(
	[ParentKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO


ALTER TABLE [dbo].[GroupChilds] ADD CONSTRAINT [UK_ParentKey_ChildGroupID] UNIQUE NONCLUSTERED  ([ParentKey], [ChildGroupID])
GO
ALTER TABLE [dbo].[LinkedAccountClaims] ADD CONSTRAINT [UK_ParentKey_ProviderName_ProviderAccountID_Type_Value] UNIQUE NONCLUSTERED  ([ParentKey], [ProviderName], [ProviderAccountID], [Type], [Value])
GO
ALTER TABLE [dbo].[LinkedAccounts] ADD CONSTRAINT [UK_ParentKey_ProviderName_ProviderAccountID] UNIQUE NONCLUSTERED  ([ParentKey], [ProviderName], [ProviderAccountID])
GO
ALTER TABLE [dbo].[PasswordResetSecrets] ADD CONSTRAINT [UK_ParentKey_Question] UNIQUE NONCLUSTERED  ([ParentKey], [Question])
GO
ALTER TABLE [dbo].[UserCertificates] ADD CONSTRAINT [UK_ParentKey_Thumbprint] UNIQUE NONCLUSTERED  ([ParentKey], [Thumbprint])
GO
ALTER TABLE [dbo].[UserClaims] ADD CONSTRAINT [UK_ParentKey_Type_Value] UNIQUE NONCLUSTERED  ([ParentKey], [Type], [Value])
GO

/* migration table */
DELETE from [dbo].[__MigrationHistory] where [ContextKey] = 'BrockAllen.MembershipReboot.Ef.DefaultMembershipRebootDatabase'
GO
INSERT [dbo].[__MigrationHistory] ([MigrationId], [ContextKey], [Model], [ProductVersion]) VALUES (N'201403032007363_v7_InitialCreate', N'BrockAllen.MembershipReboot.Ef.Migrations.Configuration', 0x
GO
INSERT [dbo].[__MigrationHistory] ([MigrationId], [ContextKey], [Model], [ProductVersion]) VALUES (N'201403032007511_v7_Indexes', N'BrockAllen.MembershipReboot.Ef.Migrations.Configuration', 0x
GO

COMMIT
